{
  "contractName": "IEntryPoint",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "ret",
          "type": "bytes"
        }
      ],
      "name": "DelegateAndRevert",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "opIndex",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "FailedOp",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "opIndex",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "inner",
          "type": "bytes"
        }
      ],
      "name": "FailedOpWithRevert",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "PostOpReverted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SenderAddressResult",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "aggregator",
          "type": "address"
        }
      ],
      "name": "SignatureValidationFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymaster",
          "type": "address"
        }
      ],
      "name": "AccountDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "BeforeExecution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalDeposit",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "revertReason",
          "type": "bytes"
        }
      ],
      "name": "PostOpRevertReason",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "aggregator",
          "type": "address"
        }
      ],
      "name": "SignatureAggregatorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakeDelaySec",
          "type": "uint256"
        }
      ],
      "name": "StakeLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawTime",
          "type": "uint256"
        }
      ],
      "name": "StakeUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "paymaster",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actualGasCost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actualGasUsed",
          "type": "uint256"
        }
      ],
      "name": "UserOperationEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "UserOperationPrefundTooLow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "revertReason",
          "type": "bytes"
        }
      ],
      "name": "UserOperationRevertReason",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "unstakeDelaySec",
          "type": "uint32"
        }
      ],
      "name": "addStake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "depositTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getDepositInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "staked",
              "type": "bool"
            },
            {
              "internalType": "uint112",
              "name": "stake",
              "type": "uint112"
            },
            {
              "internalType": "uint32",
              "name": "unstakeDelaySec",
              "type": "uint32"
            },
            {
              "internalType": "uint48",
              "name": "withdrawTime",
              "type": "uint48"
            }
          ],
          "internalType": "struct IStakeManager.DepositInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint192",
          "name": "key",
          "type": "uint192"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "key",
          "type": "uint192"
        }
      ],
      "name": "incrementNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "withdrawAddress",
          "type": "address"
        }
      ],
      "name": "withdrawStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "withdrawAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "accountGasLimits",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "gasFees",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct PackedUserOperation[]",
          "name": "ops",
          "type": "tuple[]"
        },
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "handleOps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "initCode",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "accountGasLimits",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "preVerificationGas",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "gasFees",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "paymasterAndData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ],
              "internalType": "struct PackedUserOperation[]",
              "name": "userOps",
              "type": "tuple[]"
            },
            {
              "internalType": "contract IAggregator",
              "name": "aggregator",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IEntryPoint.UserOpsPerAggregator[]",
          "name": "opsPerAggregator",
          "type": "tuple[]"
        },
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "handleAggregatedOps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "accountGasLimits",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "gasFees",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct PackedUserOperation",
          "name": "userOp",
          "type": "tuple"
        }
      ],
      "name": "getUserOpHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "initCode",
          "type": "bytes"
        }
      ],
      "name": "getSenderAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "delegateAndRevert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "senderCreator",
      "outputs": [
        {
          "internalType": "contract ISenderCreator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"ret\",\"type\":\"bytes\"}],\"name\":\"DelegateAndRevert\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"opIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"FailedOp\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"opIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"inner\",\"type\":\"bytes\"}],\"name\":\"FailedOpWithRevert\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"PostOpReverted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderAddressResult\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"SignatureValidationFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"}],\"name\":\"AccountDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BeforeExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"}],\"name\":\"PostOpRevertReason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"SignatureAggregatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"name\":\"StakeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"StakeUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualGasUsed\",\"type\":\"uint256\"}],\"name\":\"UserOperationEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"UserOperationPrefundTooLow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"}],\"name\":\"UserOperationRevertReason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"delegateAndRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint112\",\"name\":\"stake\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"withdrawTime\",\"type\":\"uint48\"}],\"internalType\":\"struct IStakeManager.DepositInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"getSenderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"accountGasLimits\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasFees\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PackedUserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"getUserOpHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"accountGasLimits\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasFees\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PackedUserOperation[]\",\"name\":\"userOps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAggregator\",\"name\":\"aggregator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.UserOpsPerAggregator[]\",\"name\":\"opsPerAggregator\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"handleAggregatedOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"accountGasLimits\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasFees\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PackedUserOperation[]\",\"name\":\"ops\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"handleOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"incrementNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderCreator\",\"outputs\":[{\"internalType\":\"contract ISenderCreator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"FailedOp(uint256,string)\":[{\"params\":{\"opIndex\":\"- Index into the array of ops to the failed one (in simulateValidation, this is always zero).\",\"reason\":\"- Revert reason. The string starts with a unique code \\\"AAmn\\\",                  where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,                  so a failure can be attributed to the correct entity.\"}}],\"FailedOpWithRevert(uint256,string,bytes)\":[{\"details\":\"note that inner is truncated to 2048 bytes\",\"params\":{\"inner\":\"- data from inner cought revert reason\",\"opIndex\":\"- Index into the array of ops to the failed one (in simulateValidation, this is always zero).\",\"reason\":\"- Revert reason. see FailedOp(uint256,string), above\"}}],\"SignatureValidationFailed(address)\":[{\"params\":{\"aggregator\":\"The aggregator that failed to verify the signature\"}}]},\"events\":{\"AccountDeployed(bytes32,address,address,address)\":{\"params\":{\"factory\":\"- The factory used to deploy this account (in the initCode)\",\"paymaster\":\"- The paymaster used by this UserOp\",\"sender\":\"- The account that is deployed\",\"userOpHash\":\"- The userOp that deployed this account. UserOperationEvent will follow.\"}},\"PostOpRevertReason(bytes32,address,uint256,bytes)\":{\"params\":{\"nonce\":\"- The nonce used in the request.\",\"revertReason\":\"- The return bytes from the reverted call to \\\"postOp\\\".\",\"sender\":\"- The sender of this request.\",\"userOpHash\":\"- The request unique identifier.\"}},\"SignatureAggregatorChanged(address)\":{\"params\":{\"aggregator\":\"- The aggregator used for the following UserOperationEvents.\"}},\"UserOperationPrefundTooLow(bytes32,address,uint256)\":{\"params\":{\"nonce\":\"- The nonce used in the request.\",\"sender\":\"- The sender of this request.\",\"userOpHash\":\"- The request unique identifier.\"}},\"UserOperationRevertReason(bytes32,address,uint256,bytes)\":{\"params\":{\"nonce\":\"- The nonce used in the request.\",\"revertReason\":\"- The return bytes from the reverted \\\"callData\\\" call.\",\"sender\":\"- The sender of this request.\",\"userOpHash\":\"- The request unique identifier.\"}}},\"kind\":\"dev\",\"methods\":{\"addStake(uint32)\":{\"params\":{\"unstakeDelaySec\":\"- The new lock duration before the deposit can be withdrawn.\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"- The account to query.\"},\"returns\":{\"_0\":\"- The deposit (for gas payment) of the account.\"}},\"delegateAndRevert(address,bytes)\":{\"details\":\"calling this method, the EntryPoint will make a delegatecall to the given data, and report (via revert) the result.  The method always revert, so is only useful off-chain for dry run calls, in cases where state-override to replace  actual EntryPoint code is less convenient.\",\"params\":{\"data\":\"data to pass to target in a delegatecall\",\"target\":\"a target contract to make a delegatecall from entrypoint\"}},\"depositTo(address)\":{\"params\":{\"account\":\"- The account to add to.\"}},\"getDepositInfo(address)\":{\"params\":{\"account\":\"- The account to query.\"},\"returns\":{\"info\":\"  - Full deposit information of given account.\"}},\"getNonce(address,uint192)\":{\"params\":{\"key\":\"the high 192 bit of the nonce\",\"sender\":\"the account address\"},\"returns\":{\"nonce\":\"a full nonce to pass for next UserOp with this sender.\"}},\"getSenderAddress(bytes)\":{\"params\":{\"initCode\":\"- The constructor code to be passed into the UserOperation.\"}},\"getUserOpHash((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes))\":{\"params\":{\"userOp\":\"- The user operation to generate the request ID for.\"},\"returns\":{\"_0\":\"hash the hash of this UserOperation\"}},\"handleAggregatedOps(((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address,bytes)[],address)\":{\"params\":{\"beneficiary\":\"- The address to receive the fees.\",\"opsPerAggregator\":\"- The operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts).\"}},\"handleOps((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address)\":{\"params\":{\"beneficiary\":\"- The address to receive the fees.\",\"ops\":\"- The operations to execute.\"}},\"incrementNonce(uint192)\":{\"params\":{\"key\":\"- the \\\"nonce key\\\" to increment the \\\"nonce sequence\\\" for.\"}},\"withdrawStake(address)\":{\"params\":{\"withdrawAddress\":\"- The address to send withdrawn value.\"}},\"withdrawTo(address,uint256)\":{\"params\":{\"withdrawAddress\":\"- The address to send withdrawn value.\",\"withdrawAmount\":\"- The amount to withdraw.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"FailedOp(uint256,string)\":[{\"notice\":\"A custom revert error of handleOps andhandleAggregatedOps, to identify the offending op. Should be caught in off-chain handleOps/handleAggregatedOps simulation and not happen on-chain. Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts. NOTE: If simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\"}],\"FailedOpWithRevert(uint256,string,bytes)\":[{\"notice\":\"A custom revert error of handleOps and handleAggregatedOps, to report a revert by account or paymaster.\"}],\"SignatureValidationFailed(address)\":[{\"notice\":\"Error case when a signature aggregator fails to verify the aggregated signature it had created.\"}]},\"events\":{\"AccountDeployed(bytes32,address,address,address)\":{\"notice\":\"Account \\\"sender\\\" was deployed.\"},\"BeforeExecution()\":{\"notice\":\"An event emitted by handleOps() and handleAggregatedOps(), before starting the execution loop. Any event emitted before this event, is part of the validation.\"},\"PostOpRevertReason(bytes32,address,uint256,bytes)\":{\"notice\":\"An event emitted if the UserOperation Paymaster's \\\"postOp\\\" call reverted with non-zero length.\"},\"SignatureAggregatorChanged(address)\":{\"notice\":\"Signature aggregator used by the following UserOperationEvents within this bundle.\"},\"UserOperationPrefundTooLow(bytes32,address,uint256)\":{\"notice\":\"UserOp consumed more than prefund. The UserOperation is reverted, and no refund is made.\"},\"UserOperationRevertReason(bytes32,address,uint256,bytes)\":{\"notice\":\"An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length.\"}},\"kind\":\"user\",\"methods\":{\"addStake(uint32)\":{\"notice\":\"Add to the account's stake - amount and delay any pending unstake is first cancelled.\"},\"balanceOf(address)\":{\"notice\":\"Get account balance.\"},\"delegateAndRevert(address,bytes)\":{\"notice\":\"Helper method for dry-run testing.\"},\"depositTo(address)\":{\"notice\":\"Add to the deposit of the given account.\"},\"getDepositInfo(address)\":{\"notice\":\"Get deposit info.\"},\"getNonce(address,uint192)\":{\"notice\":\"Return the next nonce for this sender. Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop) But UserOp with different keys can come with arbitrary order.\"},\"getSenderAddress(bytes)\":{\"notice\":\"Get counterfactual sender address. Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation. This method always revert, and returns the address in SenderAddressResult error.this method cannot be used for EIP-7702 derived contracts.\"},\"getUserOpHash((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes))\":{\"notice\":\"Generate a request Id - unique identifier for this request. The request ID is a hash over the content of the userOp (except the signature), entrypoint address, chainId and (optionally) 7702 delegate address\"},\"handleAggregatedOps(((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address,bytes)[],address)\":{\"notice\":\"Execute a batch of UserOperation with Aggregators\"},\"handleOps((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address)\":{\"notice\":\"Execute a batch of UserOperations. No signature aggregator is used. If any account requires an aggregator (that is, it returned an aggregator when performing simulateValidation), then handleAggregatedOps() must be used instead.\"},\"incrementNonce(uint192)\":{\"notice\":\"Manually increment the nonce of the sender. This method is exposed just for completeness.. Account does NOT need to call it, neither during validation, nor elsewhere, as the EntryPoint will update the nonce regardless. Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future UserOperations will not pay extra for the first transaction with a given key.\"},\"senderCreator()\":{\"notice\":\"Retrieves the immutable SenderCreator contract which is responsible for deployment of sender contracts.\"},\"unlockStake()\":{\"notice\":\"Attempt to unlock the stake. The value can be withdrawn (using withdrawStake) after the unstake delay.\"},\"withdrawStake(address)\":{\"notice\":\"Withdraw from the (unlocked) stake. Must first call unlockStake and wait for the unstakeDelay to pass.\"},\"withdrawTo(address,uint256)\":{\"notice\":\"Withdraw from the deposit.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@account-abstraction/contracts/interfaces/IEntryPoint.sol\":\"IEntryPoint\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@account-abstraction/contracts/interfaces/IAggregator.sol\":{\"keccak256\":\"0xdf580eafa015b81bde436d6a5468cc92b531ada84007cef885e923f6dfc5e8bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99f0060626568619ac94d750eb4c0888d92ca5775a6bd957fef9847843835b77\",\"dweb:/ipfs/QmXJer3D9sTkEj3mmUDqpdqfGpe46Rn9G22nGrfZdP2wAT\"]},\"@account-abstraction/contracts/interfaces/IEntryPoint.sol\":{\"keccak256\":\"0x3b0423737e810dd886183ed32cfed9b45edd315f5fb3e1076fc19f86791adc64\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c43081efaa2eda581b6249053281bb58cb0c4eeb6bf87efc55d95daaec2fc931\",\"dweb:/ipfs/QmXRN2JnyzWZNeFMHauTnDuc7jhxGY4ZkY37HTtjXKdC87\"]},\"@account-abstraction/contracts/interfaces/INonceManager.sol\":{\"keccak256\":\"0xee493ae200b8c675bdc0da66f7ac6bb883ecea33672d7d0a95526b9eecdedf87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://979784a0333ac4ef3cc53ab9323a4b7fa574d929bd511f0eed03d3b0370db22d\",\"dweb:/ipfs/QmeiciN5gs4upM6vfKvrRxWiDBUzMU4uJQRRkJajhim9gX\"]},\"@account-abstraction/contracts/interfaces/ISenderCreator.sol\":{\"keccak256\":\"0x677f651d733162b80d1af7901e4f36469e362737a8353d1d0cc7bb94489e4ba4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6905a80acd70b444ea230b5b582164cb99aaae518bf72c88f8292df31615570\",\"dweb:/ipfs/QmfTKTPwJYf9pmA3T5PE5cCG8GLLDrLaq3jQqMP3pVRL6w\"]},\"@account-abstraction/contracts/interfaces/IStakeManager.sol\":{\"keccak256\":\"0xe48e904fcac02295aad07fbfa1c1d449a74bf44c04e432afef6f34d1ef726ae0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5882b635ea6f5da9ae411485975888431de571f85d4baf35e3db1a83c1f14b85\",\"dweb:/ipfs/QmVSTX36Byr48y8JBmz1hCTGAAyQdTYegQbsSqdRNuSQYz\"]},\"@account-abstraction/contracts/interfaces/PackedUserOperation.sol\":{\"keccak256\":\"0xb15188e25e45fe73097e279675b6c0beccbd4133ead2260f8f0c4ba840046800\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5d14c1edd1e95d37c26e54bb34305e2cc9dedc46eb75ec91caeb777678e8ea79\",\"dweb:/ipfs/QmcCL2syVtV7W3XvYx3si84MPkbEJKqEN8hjFNhAPoDDhK\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "/**\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\n ** Only one instance required on each chain.\n **/\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/* solhint-disable avoid-low-level-calls */\n/* solhint-disable no-inline-assembly */\n/* solhint-disable reason-string */\n\nimport \"./PackedUserOperation.sol\";\nimport \"./IStakeManager.sol\";\nimport \"./IAggregator.sol\";\nimport \"./INonceManager.sol\";\nimport \"./ISenderCreator.sol\";\n\ninterface IEntryPoint is IStakeManager, INonceManager {\n    /***\n     * An event emitted after each successful request.\n     * @param userOpHash    - Unique identifier for the request (hash its entire content, except signature).\n     * @param sender        - The account that generates this request.\n     * @param paymaster     - If non-null, the paymaster that pays for this request.\n     * @param nonce         - The nonce value from the request.\n     * @param success       - True if the sender transaction succeeded, false if reverted.\n     * @param actualGasCost - Actual amount paid (by account or paymaster) for this UserOperation.\n     * @param actualGasUsed - Total gas used by this UserOperation (including preVerification, creation,\n     *                        validation and execution).\n     */\n    event UserOperationEvent(\n        bytes32 indexed userOpHash,\n        address indexed sender,\n        address indexed paymaster,\n        uint256 nonce,\n        bool success,\n        uint256 actualGasCost,\n        uint256 actualGasUsed\n    );\n\n    /**\n     * Account \"sender\" was deployed.\n     * @param userOpHash - The userOp that deployed this account. UserOperationEvent will follow.\n     * @param sender     - The account that is deployed\n     * @param factory    - The factory used to deploy this account (in the initCode)\n     * @param paymaster  - The paymaster used by this UserOp\n     */\n    event AccountDeployed(\n        bytes32 indexed userOpHash,\n        address indexed sender,\n        address factory,\n        address paymaster\n    );\n\n    /**\n     * An event emitted if the UserOperation \"callData\" reverted with non-zero length.\n     * @param userOpHash   - The request unique identifier.\n     * @param sender       - The sender of this request.\n     * @param nonce        - The nonce used in the request.\n     * @param revertReason - The return bytes from the reverted \"callData\" call.\n     */\n    event UserOperationRevertReason(\n        bytes32 indexed userOpHash,\n        address indexed sender,\n        uint256 nonce,\n        bytes revertReason\n    );\n\n    /**\n     * An event emitted if the UserOperation Paymaster's \"postOp\" call reverted with non-zero length.\n     * @param userOpHash   - The request unique identifier.\n     * @param sender       - The sender of this request.\n     * @param nonce        - The nonce used in the request.\n     * @param revertReason - The return bytes from the reverted call to \"postOp\".\n     */\n    event PostOpRevertReason(\n        bytes32 indexed userOpHash,\n        address indexed sender,\n        uint256 nonce,\n        bytes revertReason\n    );\n\n    /**\n     * UserOp consumed more than prefund. The UserOperation is reverted, and no refund is made.\n     * @param userOpHash   - The request unique identifier.\n     * @param sender       - The sender of this request.\n     * @param nonce        - The nonce used in the request.\n     */\n    event UserOperationPrefundTooLow(\n        bytes32 indexed userOpHash,\n        address indexed sender,\n        uint256 nonce\n    );\n\n    /**\n     * An event emitted by handleOps() and handleAggregatedOps(), before starting the execution loop.\n     * Any event emitted before this event, is part of the validation.\n     */\n    event BeforeExecution();\n\n    /**\n     * Signature aggregator used by the following UserOperationEvents within this bundle.\n     * @param aggregator - The aggregator used for the following UserOperationEvents.\n     */\n    event SignatureAggregatorChanged(address indexed aggregator);\n\n    /**\n     * A custom revert error of handleOps andhandleAggregatedOps, to identify the offending op.\n     * Should be caught in off-chain handleOps/handleAggregatedOps simulation and not happen on-chain.\n     * Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\n     * NOTE: If simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\n     * @param opIndex - Index into the array of ops to the failed one (in simulateValidation, this is always zero).\n     * @param reason  - Revert reason. The string starts with a unique code \"AAmn\",\n     *                  where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,\n     *                  so a failure can be attributed to the correct entity.\n     */\n    error FailedOp(uint256 opIndex, string reason);\n\n    /**\n     * A custom revert error of handleOps and handleAggregatedOps, to report a revert by account or paymaster.\n     * @param opIndex - Index into the array of ops to the failed one (in simulateValidation, this is always zero).\n     * @param reason  - Revert reason. see FailedOp(uint256,string), above\n     * @param inner   - data from inner cought revert reason\n     * @dev note that inner is truncated to 2048 bytes\n     */\n    error FailedOpWithRevert(uint256 opIndex, string reason, bytes inner);\n\n    error PostOpReverted(bytes returnData);\n\n    /**\n     * Error case when a signature aggregator fails to verify the aggregated signature it had created.\n     * @param aggregator The aggregator that failed to verify the signature\n     */\n    error SignatureValidationFailed(address aggregator);\n\n    // Return value of getSenderAddress.\n    error SenderAddressResult(address sender);\n\n    // UserOps handled, per aggregator.\n    struct UserOpsPerAggregator {\n        PackedUserOperation[] userOps;\n        // Aggregator address\n        IAggregator aggregator;\n        // Aggregated signature\n        bytes signature;\n    }\n\n    /**\n     * Execute a batch of UserOperations.\n     * No signature aggregator is used.\n     * If any account requires an aggregator (that is, it returned an aggregator when\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\n     * @param ops         - The operations to execute.\n     * @param beneficiary - The address to receive the fees.\n     */\n    function handleOps(\n        PackedUserOperation[] calldata ops,\n        address payable beneficiary\n    ) external;\n\n    /**\n     * Execute a batch of UserOperation with Aggregators\n     * @param opsPerAggregator - The operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts).\n     * @param beneficiary      - The address to receive the fees.\n     */\n    function handleAggregatedOps(\n        UserOpsPerAggregator[] calldata opsPerAggregator,\n        address payable beneficiary\n    ) external;\n\n    /**\n     * Generate a request Id - unique identifier for this request.\n     * The request ID is a hash over the content of the userOp (except the signature), entrypoint address, chainId and (optionally) 7702 delegate address\n     * @param userOp - The user operation to generate the request ID for.\n     * @return hash the hash of this UserOperation\n     */\n    function getUserOpHash(\n        PackedUserOperation calldata userOp\n    ) external view returns (bytes32);\n\n    /**\n     * Gas and return values during simulation.\n     * @param preOpGas         - The gas used for validation (including preValidationGas)\n     * @param prefund          - The required prefund for this operation\n     * @param accountValidationData   - returned validationData from account.\n     * @param paymasterValidationData - return validationData from paymaster.\n     * @param paymasterContext - Returned by validatePaymasterUserOp (to be passed into postOp)\n     */\n    struct ReturnInfo {\n        uint256 preOpGas;\n        uint256 prefund;\n        uint256 accountValidationData;\n        uint256 paymasterValidationData;\n        bytes paymasterContext;\n    }\n\n    /**\n     * Get counterfactual sender address.\n     * Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\n     * This method always revert, and returns the address in SenderAddressResult error.\n     * @notice this method cannot be used for EIP-7702 derived contracts.\n     *\n     * @param initCode - The constructor code to be passed into the UserOperation.\n     */\n    function getSenderAddress(bytes memory initCode) external;\n\n    error DelegateAndRevert(bool success, bytes ret);\n\n    /**\n     * Helper method for dry-run testing.\n     * @dev calling this method, the EntryPoint will make a delegatecall to the given data, and report (via revert) the result.\n     *  The method always revert, so is only useful off-chain for dry run calls, in cases where state-override to replace\n     *  actual EntryPoint code is less convenient.\n     * @param target a target contract to make a delegatecall from entrypoint\n     * @param data data to pass to target in a delegatecall\n     */\n    function delegateAndRevert(address target, bytes calldata data) external;\n\n    /**\n     * @notice Retrieves the immutable SenderCreator contract which is responsible for deployment of sender contracts.\n     */\n    function senderCreator() external view returns (ISenderCreator);\n}\n",
  "sourcePath": "@account-abstraction\\contracts\\interfaces\\IEntryPoint.sol",
  "ast": {
    "absolutePath": "@account-abstraction/contracts/interfaces/IEntryPoint.sol",
    "exportedSymbols": {
      "IAggregator": [
        4734
      ],
      "IEntryPoint": [
        4919
      ],
      "INonceManager": [
        4938
      ],
      "ISenderCreator": [
        4994
      ],
      "IStakeManager": [
        5098
      ],
      "PackedUserOperation": [
        5120
      ]
    },
    "id": 4920,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4736,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".28"
        ],
        "nodeType": "PragmaDirective",
        "src": "159:24:15"
      },
      {
        "absolutePath": "@account-abstraction/contracts/interfaces/PackedUserOperation.sol",
        "file": "./PackedUserOperation.sol",
        "id": 4737,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4920,
        "sourceUnit": 5121,
        "src": "307:35:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@account-abstraction/contracts/interfaces/IStakeManager.sol",
        "file": "./IStakeManager.sol",
        "id": 4738,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4920,
        "sourceUnit": 5099,
        "src": "343:29:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@account-abstraction/contracts/interfaces/IAggregator.sol",
        "file": "./IAggregator.sol",
        "id": 4739,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4920,
        "sourceUnit": 4735,
        "src": "373:27:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@account-abstraction/contracts/interfaces/INonceManager.sol",
        "file": "./INonceManager.sol",
        "id": 4740,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4920,
        "sourceUnit": 4939,
        "src": "401:29:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@account-abstraction/contracts/interfaces/ISenderCreator.sol",
        "file": "./ISenderCreator.sol",
        "id": 4741,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4920,
        "sourceUnit": 4995,
        "src": "431:30:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 4742,
              "name": "IStakeManager",
              "nameLocations": [
                "488:13:15"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 5098,
              "src": "488:13:15"
            },
            "id": 4743,
            "nodeType": "InheritanceSpecifier",
            "src": "488:13:15"
          },
          {
            "baseName": {
              "id": 4744,
              "name": "INonceManager",
              "nameLocations": [
                "503:13:15"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 4938,
              "src": "503:13:15"
            },
            "id": 4745,
            "nodeType": "InheritanceSpecifier",
            "src": "503:13:15"
          }
        ],
        "canonicalName": "IEntryPoint",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 4919,
        "linearizedBaseContracts": [
          4919,
          4938,
          5098
        ],
        "name": "IEntryPoint",
        "nameLocation": "473:11:15",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "eventSelector": "49628fd1471006c1482da88028e9ce4dbb080b815c9b0344d39e5a8e6ec1419f",
            "id": 4761,
            "name": "UserOperationEvent",
            "nameLocation": "1282:18:15",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4760,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4747,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "userOpHash",
                  "nameLocation": "1326:10:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4761,
                  "src": "1310:26:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4746,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1310:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4749,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "1362:6:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4761,
                  "src": "1346:22:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4748,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1346:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4751,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "paymaster",
                  "nameLocation": "1394:9:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4761,
                  "src": "1378:25:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4750,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1378:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4753,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "nonce",
                  "nameLocation": "1421:5:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4761,
                  "src": "1413:13:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4752,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1413:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4755,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "success",
                  "nameLocation": "1441:7:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4761,
                  "src": "1436:12:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4754,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1436:4:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4757,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "actualGasCost",
                  "nameLocation": "1466:13:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4761,
                  "src": "1458:21:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4756,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1458:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4759,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "actualGasUsed",
                  "nameLocation": "1497:13:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4761,
                  "src": "1489:21:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4758,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1489:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1300:216:15"
            },
            "src": "1276:241:15"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 4762,
              "nodeType": "StructuredDocumentation",
              "src": "1523:349:15",
              "text": " Account \"sender\" was deployed.\n @param userOpHash - The userOp that deployed this account. UserOperationEvent will follow.\n @param sender     - The account that is deployed\n @param factory    - The factory used to deploy this account (in the initCode)\n @param paymaster  - The paymaster used by this UserOp"
            },
            "eventSelector": "d51a9c61267aa6196961883ecf5ff2da6619c37dac0fa92122513fb32c032d2d",
            "id": 4772,
            "name": "AccountDeployed",
            "nameLocation": "1883:15:15",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4771,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4764,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "userOpHash",
                  "nameLocation": "1924:10:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4772,
                  "src": "1908:26:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4763,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1908:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4766,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "1960:6:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4772,
                  "src": "1944:22:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4765,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1944:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4768,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "factory",
                  "nameLocation": "1984:7:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4772,
                  "src": "1976:15:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4767,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1976:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4770,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "paymaster",
                  "nameLocation": "2009:9:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4772,
                  "src": "2001:17:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4769,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2001:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1898:126:15"
            },
            "src": "1877:148:15"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 4773,
              "nodeType": "StructuredDocumentation",
              "src": "2031:356:15",
              "text": " An event emitted if the UserOperation \"callData\" reverted with non-zero length.\n @param userOpHash   - The request unique identifier.\n @param sender       - The sender of this request.\n @param nonce        - The nonce used in the request.\n @param revertReason - The return bytes from the reverted \"callData\" call."
            },
            "eventSelector": "1c4fada7374c0a9ee8841fc38afe82932dc0f8e69012e927f061a8bae611a201",
            "id": 4783,
            "name": "UserOperationRevertReason",
            "nameLocation": "2398:25:15",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4782,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4775,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "userOpHash",
                  "nameLocation": "2449:10:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4783,
                  "src": "2433:26:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4774,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2433:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4777,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "2485:6:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4783,
                  "src": "2469:22:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4776,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2469:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4779,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "nonce",
                  "nameLocation": "2509:5:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4783,
                  "src": "2501:13:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4778,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2501:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4781,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "revertReason",
                  "nameLocation": "2530:12:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4783,
                  "src": "2524:18:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4780,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2524:5:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2423:125:15"
            },
            "src": "2392:157:15"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 4784,
              "nodeType": "StructuredDocumentation",
              "src": "2555:372:15",
              "text": " An event emitted if the UserOperation Paymaster's \"postOp\" call reverted with non-zero length.\n @param userOpHash   - The request unique identifier.\n @param sender       - The sender of this request.\n @param nonce        - The nonce used in the request.\n @param revertReason - The return bytes from the reverted call to \"postOp\"."
            },
            "eventSelector": "f62676f440ff169a3a9afdbf812e89e7f95975ee8e5c31214ffdef631c5f4792",
            "id": 4794,
            "name": "PostOpRevertReason",
            "nameLocation": "2938:18:15",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4793,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4786,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "userOpHash",
                  "nameLocation": "2982:10:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4794,
                  "src": "2966:26:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4785,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2966:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4788,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "3018:6:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4794,
                  "src": "3002:22:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4787,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3002:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4790,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "nonce",
                  "nameLocation": "3042:5:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4794,
                  "src": "3034:13:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4789,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3034:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4792,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "revertReason",
                  "nameLocation": "3063:12:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4794,
                  "src": "3057:18:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4791,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3057:5:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2956:125:15"
            },
            "src": "2932:150:15"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 4795,
              "nodeType": "StructuredDocumentation",
              "src": "3088:284:15",
              "text": " UserOp consumed more than prefund. The UserOperation is reverted, and no refund is made.\n @param userOpHash   - The request unique identifier.\n @param sender       - The sender of this request.\n @param nonce        - The nonce used in the request."
            },
            "eventSelector": "67b4fa9642f42120bf031f3051d1824b0fe25627945b27b8a6a65d5761d5482e",
            "id": 4803,
            "name": "UserOperationPrefundTooLow",
            "nameLocation": "3383:26:15",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4802,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4797,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "userOpHash",
                  "nameLocation": "3435:10:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4803,
                  "src": "3419:26:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4796,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3419:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4799,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "3471:6:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4803,
                  "src": "3455:22:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4798,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3455:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4801,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "nonce",
                  "nameLocation": "3495:5:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4803,
                  "src": "3487:13:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4800,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3487:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3409:97:15"
            },
            "src": "3377:130:15"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 4804,
              "nodeType": "StructuredDocumentation",
              "src": "3513:184:15",
              "text": " An event emitted by handleOps() and handleAggregatedOps(), before starting the execution loop.\n Any event emitted before this event, is part of the validation."
            },
            "eventSelector": "bb47ee3e183a558b1a2ff0874b079f3fc5478b7454eacf2bfc5af2ff5878f972",
            "id": 4806,
            "name": "BeforeExecution",
            "nameLocation": "3708:15:15",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4805,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3723:2:15"
            },
            "src": "3702:24:15"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 4807,
              "nodeType": "StructuredDocumentation",
              "src": "3732:187:15",
              "text": " Signature aggregator used by the following UserOperationEvents within this bundle.\n @param aggregator - The aggregator used for the following UserOperationEvents."
            },
            "eventSelector": "575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d",
            "id": 4811,
            "name": "SignatureAggregatorChanged",
            "nameLocation": "3930:26:15",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4810,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4809,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "aggregator",
                  "nameLocation": "3973:10:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4811,
                  "src": "3957:26:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4808,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3957:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3956:28:15"
            },
            "src": "3924:61:15"
          },
          {
            "documentation": {
              "id": 4812,
              "nodeType": "StructuredDocumentation",
              "src": "3991:819:15",
              "text": " A custom revert error of handleOps andhandleAggregatedOps, to identify the offending op.\n Should be caught in off-chain handleOps/handleAggregatedOps simulation and not happen on-chain.\n Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\n NOTE: If simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\n @param opIndex - Index into the array of ops to the failed one (in simulateValidation, this is always zero).\n @param reason  - Revert reason. The string starts with a unique code \"AAmn\",\n                  where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,\n                  so a failure can be attributed to the correct entity."
            },
            "errorSelector": "220266b6",
            "id": 4818,
            "name": "FailedOp",
            "nameLocation": "4821:8:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 4817,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4814,
                  "mutability": "mutable",
                  "name": "opIndex",
                  "nameLocation": "4838:7:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4818,
                  "src": "4830:15:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4813,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4830:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4816,
                  "mutability": "mutable",
                  "name": "reason",
                  "nameLocation": "4854:6:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4818,
                  "src": "4847:13:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4815,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "4847:6:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4829:32:15"
            },
            "src": "4815:47:15"
          },
          {
            "documentation": {
              "id": 4819,
              "nodeType": "StructuredDocumentation",
              "src": "4868:429:15",
              "text": " A custom revert error of handleOps and handleAggregatedOps, to report a revert by account or paymaster.\n @param opIndex - Index into the array of ops to the failed one (in simulateValidation, this is always zero).\n @param reason  - Revert reason. see FailedOp(uint256,string), above\n @param inner   - data from inner cought revert reason\n @dev note that inner is truncated to 2048 bytes"
            },
            "errorSelector": "65c8fd4d",
            "id": 4827,
            "name": "FailedOpWithRevert",
            "nameLocation": "5308:18:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 4826,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4821,
                  "mutability": "mutable",
                  "name": "opIndex",
                  "nameLocation": "5335:7:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4827,
                  "src": "5327:15:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4820,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5327:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4823,
                  "mutability": "mutable",
                  "name": "reason",
                  "nameLocation": "5351:6:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4827,
                  "src": "5344:13:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4822,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "5344:6:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4825,
                  "mutability": "mutable",
                  "name": "inner",
                  "nameLocation": "5365:5:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4827,
                  "src": "5359:11:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4824,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "5359:5:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5326:45:15"
            },
            "src": "5302:70:15"
          },
          {
            "errorSelector": "ad7954bc",
            "id": 4831,
            "name": "PostOpReverted",
            "nameLocation": "5384:14:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 4830,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4829,
                  "mutability": "mutable",
                  "name": "returnData",
                  "nameLocation": "5405:10:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4831,
                  "src": "5399:16:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4828,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "5399:5:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5398:18:15"
            },
            "src": "5378:39:15"
          },
          {
            "documentation": {
              "id": 4832,
              "nodeType": "StructuredDocumentation",
              "src": "5423:190:15",
              "text": " Error case when a signature aggregator fails to verify the aggregated signature it had created.\n @param aggregator The aggregator that failed to verify the signature"
            },
            "errorSelector": "86a9f750",
            "id": 4836,
            "name": "SignatureValidationFailed",
            "nameLocation": "5624:25:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 4835,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4834,
                  "mutability": "mutable",
                  "name": "aggregator",
                  "nameLocation": "5658:10:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4836,
                  "src": "5650:18:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4833,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5650:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5649:20:15"
            },
            "src": "5618:52:15"
          },
          {
            "errorSelector": "6ca7b806",
            "id": 4840,
            "name": "SenderAddressResult",
            "nameLocation": "5723:19:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 4839,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4838,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "5751:6:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4840,
                  "src": "5743:14:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4837,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5743:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5742:16:15"
            },
            "src": "5717:42:15"
          },
          {
            "canonicalName": "IEntryPoint.UserOpsPerAggregator",
            "id": 4850,
            "members": [
              {
                "constant": false,
                "id": 4844,
                "mutability": "mutable",
                "name": "userOps",
                "nameLocation": "5865:7:15",
                "nodeType": "VariableDeclaration",
                "scope": 4850,
                "src": "5843:29:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_struct$_PackedUserOperation_$5120_storage_$dyn_storage_ptr",
                  "typeString": "struct PackedUserOperation[]"
                },
                "typeName": {
                  "baseType": {
                    "id": 4842,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4841,
                      "name": "PackedUserOperation",
                      "nameLocations": [
                        "5843:19:15"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5120,
                      "src": "5843:19:15"
                    },
                    "referencedDeclaration": 5120,
                    "src": "5843:19:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_PackedUserOperation_$5120_storage_ptr",
                      "typeString": "struct PackedUserOperation"
                    }
                  },
                  "id": 4843,
                  "nodeType": "ArrayTypeName",
                  "src": "5843:21:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_PackedUserOperation_$5120_storage_$dyn_storage_ptr",
                    "typeString": "struct PackedUserOperation[]"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4847,
                "mutability": "mutable",
                "name": "aggregator",
                "nameLocation": "5924:10:15",
                "nodeType": "VariableDeclaration",
                "scope": 4850,
                "src": "5912:22:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_IAggregator_$4734",
                  "typeString": "contract IAggregator"
                },
                "typeName": {
                  "id": 4846,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 4845,
                    "name": "IAggregator",
                    "nameLocations": [
                      "5912:11:15"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 4734,
                    "src": "5912:11:15"
                  },
                  "referencedDeclaration": 4734,
                  "src": "5912:11:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IAggregator_$4734",
                    "typeString": "contract IAggregator"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4849,
                "mutability": "mutable",
                "name": "signature",
                "nameLocation": "5982:9:15",
                "nodeType": "VariableDeclaration",
                "scope": 4850,
                "src": "5976:15:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_storage_ptr",
                  "typeString": "bytes"
                },
                "typeName": {
                  "id": 4848,
                  "name": "bytes",
                  "nodeType": "ElementaryTypeName",
                  "src": "5976:5:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_storage_ptr",
                    "typeString": "bytes"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "UserOpsPerAggregator",
            "nameLocation": "5812:20:15",
            "nodeType": "StructDefinition",
            "scope": 4919,
            "src": "5805:193:15",
            "visibility": "public"
          },
          {
            "documentation": {
              "id": 4851,
              "nodeType": "StructuredDocumentation",
              "src": "6004:383:15",
              "text": " Execute a batch of UserOperations.\n No signature aggregator is used.\n If any account requires an aggregator (that is, it returned an aggregator when\n performing simulateValidation), then handleAggregatedOps() must be used instead.\n @param ops         - The operations to execute.\n @param beneficiary - The address to receive the fees."
            },
            "functionSelector": "765e827f",
            "id": 4860,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "handleOps",
            "nameLocation": "6401:9:15",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4858,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4855,
                  "mutability": "mutable",
                  "name": "ops",
                  "nameLocation": "6451:3:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4860,
                  "src": "6420:34:15",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_PackedUserOperation_$5120_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct PackedUserOperation[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 4853,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 4852,
                        "name": "PackedUserOperation",
                        "nameLocations": [
                          "6420:19:15"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 5120,
                        "src": "6420:19:15"
                      },
                      "referencedDeclaration": 5120,
                      "src": "6420:19:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_PackedUserOperation_$5120_storage_ptr",
                        "typeString": "struct PackedUserOperation"
                      }
                    },
                    "id": 4854,
                    "nodeType": "ArrayTypeName",
                    "src": "6420:21:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_PackedUserOperation_$5120_storage_$dyn_storage_ptr",
                      "typeString": "struct PackedUserOperation[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4857,
                  "mutability": "mutable",
                  "name": "beneficiary",
                  "nameLocation": "6480:11:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4860,
                  "src": "6464:27:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 4856,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6464:15:15",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6410:87:15"
            },
            "returnParameters": {
              "id": 4859,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6506:0:15"
            },
            "scope": 4919,
            "src": "6392:115:15",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 4861,
              "nodeType": "StructuredDocumentation",
              "src": "6513:260:15",
              "text": " Execute a batch of UserOperation with Aggregators\n @param opsPerAggregator - The operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts).\n @param beneficiary      - The address to receive the fees."
            },
            "functionSelector": "dbed18e0",
            "id": 4870,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "handleAggregatedOps",
            "nameLocation": "6787:19:15",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4868,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4865,
                  "mutability": "mutable",
                  "name": "opsPerAggregator",
                  "nameLocation": "6848:16:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4870,
                  "src": "6816:48:15",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_UserOpsPerAggregator_$4850_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct IEntryPoint.UserOpsPerAggregator[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 4863,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 4862,
                        "name": "UserOpsPerAggregator",
                        "nameLocations": [
                          "6816:20:15"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 4850,
                        "src": "6816:20:15"
                      },
                      "referencedDeclaration": 4850,
                      "src": "6816:20:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_UserOpsPerAggregator_$4850_storage_ptr",
                        "typeString": "struct IEntryPoint.UserOpsPerAggregator"
                      }
                    },
                    "id": 4864,
                    "nodeType": "ArrayTypeName",
                    "src": "6816:22:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_UserOpsPerAggregator_$4850_storage_$dyn_storage_ptr",
                      "typeString": "struct IEntryPoint.UserOpsPerAggregator[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4867,
                  "mutability": "mutable",
                  "name": "beneficiary",
                  "nameLocation": "6890:11:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4870,
                  "src": "6874:27:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 4866,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6874:15:15",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6806:101:15"
            },
            "returnParameters": {
              "id": 4869,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6916:0:15"
            },
            "scope": 4919,
            "src": "6778:139:15",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 4871,
              "nodeType": "StructuredDocumentation",
              "src": "6923:357:15",
              "text": " Generate a request Id - unique identifier for this request.\n The request ID is a hash over the content of the userOp (except the signature), entrypoint address, chainId and (optionally) 7702 delegate address\n @param userOp - The user operation to generate the request ID for.\n @return hash the hash of this UserOperation"
            },
            "functionSelector": "22cdde4c",
            "id": 4879,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getUserOpHash",
            "nameLocation": "7294:13:15",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4875,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4874,
                  "mutability": "mutable",
                  "name": "userOp",
                  "nameLocation": "7346:6:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4879,
                  "src": "7317:35:15",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_PackedUserOperation_$5120_calldata_ptr",
                    "typeString": "struct PackedUserOperation"
                  },
                  "typeName": {
                    "id": 4873,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4872,
                      "name": "PackedUserOperation",
                      "nameLocations": [
                        "7317:19:15"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5120,
                      "src": "7317:19:15"
                    },
                    "referencedDeclaration": 5120,
                    "src": "7317:19:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_PackedUserOperation_$5120_storage_ptr",
                      "typeString": "struct PackedUserOperation"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7307:51:15"
            },
            "returnParameters": {
              "id": 4878,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4877,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4879,
                  "src": "7382:7:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4876,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "7382:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7381:9:15"
            },
            "scope": 4919,
            "src": "7285:106:15",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "canonicalName": "IEntryPoint.ReturnInfo",
            "documentation": {
              "id": 4880,
              "nodeType": "StructuredDocumentation",
              "src": "7397:474:15",
              "text": " Gas and return values during simulation.\n @param preOpGas         - The gas used for validation (including preValidationGas)\n @param prefund          - The required prefund for this operation\n @param accountValidationData   - returned validationData from account.\n @param paymasterValidationData - return validationData from paymaster.\n @param paymasterContext - Returned by validatePaymasterUserOp (to be passed into postOp)"
            },
            "id": 4891,
            "members": [
              {
                "constant": false,
                "id": 4882,
                "mutability": "mutable",
                "name": "preOpGas",
                "nameLocation": "7912:8:15",
                "nodeType": "VariableDeclaration",
                "scope": 4891,
                "src": "7904:16:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4881,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "7904:7:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4884,
                "mutability": "mutable",
                "name": "prefund",
                "nameLocation": "7938:7:15",
                "nodeType": "VariableDeclaration",
                "scope": 4891,
                "src": "7930:15:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4883,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "7930:7:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4886,
                "mutability": "mutable",
                "name": "accountValidationData",
                "nameLocation": "7963:21:15",
                "nodeType": "VariableDeclaration",
                "scope": 4891,
                "src": "7955:29:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4885,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "7955:7:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4888,
                "mutability": "mutable",
                "name": "paymasterValidationData",
                "nameLocation": "8002:23:15",
                "nodeType": "VariableDeclaration",
                "scope": 4891,
                "src": "7994:31:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4887,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "7994:7:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4890,
                "mutability": "mutable",
                "name": "paymasterContext",
                "nameLocation": "8041:16:15",
                "nodeType": "VariableDeclaration",
                "scope": 4891,
                "src": "8035:22:15",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_storage_ptr",
                  "typeString": "bytes"
                },
                "typeName": {
                  "id": 4889,
                  "name": "bytes",
                  "nodeType": "ElementaryTypeName",
                  "src": "8035:5:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_storage_ptr",
                    "typeString": "bytes"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "ReturnInfo",
            "nameLocation": "7883:10:15",
            "nodeType": "StructDefinition",
            "scope": 4919,
            "src": "7876:188:15",
            "visibility": "public"
          },
          {
            "documentation": {
              "id": 4892,
              "nodeType": "StructuredDocumentation",
              "src": "8070:420:15",
              "text": " Get counterfactual sender address.\n Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\n This method always revert, and returns the address in SenderAddressResult error.\n @notice this method cannot be used for EIP-7702 derived contracts.\n @param initCode - The constructor code to be passed into the UserOperation."
            },
            "functionSelector": "9b249f69",
            "id": 4897,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getSenderAddress",
            "nameLocation": "8504:16:15",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4895,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4894,
                  "mutability": "mutable",
                  "name": "initCode",
                  "nameLocation": "8534:8:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4897,
                  "src": "8521:21:15",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4893,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "8521:5:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8520:23:15"
            },
            "returnParameters": {
              "id": 4896,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8552:0:15"
            },
            "scope": 4919,
            "src": "8495:58:15",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "errorSelector": "99410554",
            "id": 4903,
            "name": "DelegateAndRevert",
            "nameLocation": "8565:17:15",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 4902,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4899,
                  "mutability": "mutable",
                  "name": "success",
                  "nameLocation": "8588:7:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4903,
                  "src": "8583:12:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4898,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "8583:4:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4901,
                  "mutability": "mutable",
                  "name": "ret",
                  "nameLocation": "8603:3:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4903,
                  "src": "8597:9:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4900,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "8597:5:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8582:25:15"
            },
            "src": "8559:49:15"
          },
          {
            "documentation": {
              "id": 4904,
              "nodeType": "StructuredDocumentation",
              "src": "8614:492:15",
              "text": " Helper method for dry-run testing.\n @dev calling this method, the EntryPoint will make a delegatecall to the given data, and report (via revert) the result.\n  The method always revert, so is only useful off-chain for dry run calls, in cases where state-override to replace\n  actual EntryPoint code is less convenient.\n @param target a target contract to make a delegatecall from entrypoint\n @param data data to pass to target in a delegatecall"
            },
            "functionSelector": "850aaf62",
            "id": 4911,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "delegateAndRevert",
            "nameLocation": "9120:17:15",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4909,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4906,
                  "mutability": "mutable",
                  "name": "target",
                  "nameLocation": "9146:6:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4911,
                  "src": "9138:14:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4905,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9138:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4908,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "9169:4:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 4911,
                  "src": "9154:19:15",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4907,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "9154:5:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9137:37:15"
            },
            "returnParameters": {
              "id": 4910,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9183:0:15"
            },
            "scope": 4919,
            "src": "9111:73:15",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 4912,
              "nodeType": "StructuredDocumentation",
              "src": "9190:130:15",
              "text": " @notice Retrieves the immutable SenderCreator contract which is responsible for deployment of sender contracts."
            },
            "functionSelector": "09ccb880",
            "id": 4918,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "senderCreator",
            "nameLocation": "9334:13:15",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4913,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9347:2:15"
            },
            "returnParameters": {
              "id": 4917,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4916,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4918,
                  "src": "9373:14:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISenderCreator_$4994",
                    "typeString": "contract ISenderCreator"
                  },
                  "typeName": {
                    "id": 4915,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4914,
                      "name": "ISenderCreator",
                      "nameLocations": [
                        "9373:14:15"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 4994,
                      "src": "9373:14:15"
                    },
                    "referencedDeclaration": 4994,
                    "src": "9373:14:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISenderCreator_$4994",
                      "typeString": "contract ISenderCreator"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9372:16:15"
            },
            "scope": 4919,
            "src": "9325:64:15",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 4920,
        "src": "463:8928:15",
        "usedErrors": [
          4818,
          4827,
          4831,
          4836,
          4840,
          4903
        ],
        "usedEvents": [
          4761,
          4772,
          4783,
          4794,
          4803,
          4806,
          4811,
          5003,
          5011,
          5019,
          5025,
          5033
        ]
      }
    ],
    "src": "159:9233:15"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.28+commit.7893614a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.16",
  "updatedAt": "2025-06-05T05:05:53.816Z",
  "devdoc": {
    "errors": {
      "FailedOp(uint256,string)": [
        {
          "params": {
            "opIndex": "- Index into the array of ops to the failed one (in simulateValidation, this is always zero).",
            "reason": "- Revert reason. The string starts with a unique code \"AAmn\",                  where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,                  so a failure can be attributed to the correct entity."
          }
        }
      ],
      "FailedOpWithRevert(uint256,string,bytes)": [
        {
          "details": "note that inner is truncated to 2048 bytes",
          "params": {
            "inner": "- data from inner cought revert reason",
            "opIndex": "- Index into the array of ops to the failed one (in simulateValidation, this is always zero).",
            "reason": "- Revert reason. see FailedOp(uint256,string), above"
          }
        }
      ],
      "SignatureValidationFailed(address)": [
        {
          "params": {
            "aggregator": "The aggregator that failed to verify the signature"
          }
        }
      ]
    },
    "events": {
      "AccountDeployed(bytes32,address,address,address)": {
        "params": {
          "factory": "- The factory used to deploy this account (in the initCode)",
          "paymaster": "- The paymaster used by this UserOp",
          "sender": "- The account that is deployed",
          "userOpHash": "- The userOp that deployed this account. UserOperationEvent will follow."
        }
      },
      "PostOpRevertReason(bytes32,address,uint256,bytes)": {
        "params": {
          "nonce": "- The nonce used in the request.",
          "revertReason": "- The return bytes from the reverted call to \"postOp\".",
          "sender": "- The sender of this request.",
          "userOpHash": "- The request unique identifier."
        }
      },
      "SignatureAggregatorChanged(address)": {
        "params": {
          "aggregator": "- The aggregator used for the following UserOperationEvents."
        }
      },
      "UserOperationPrefundTooLow(bytes32,address,uint256)": {
        "params": {
          "nonce": "- The nonce used in the request.",
          "sender": "- The sender of this request.",
          "userOpHash": "- The request unique identifier."
        }
      },
      "UserOperationRevertReason(bytes32,address,uint256,bytes)": {
        "params": {
          "nonce": "- The nonce used in the request.",
          "revertReason": "- The return bytes from the reverted \"callData\" call.",
          "sender": "- The sender of this request.",
          "userOpHash": "- The request unique identifier."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addStake(uint32)": {
        "params": {
          "unstakeDelaySec": "- The new lock duration before the deposit can be withdrawn."
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "- The account to query."
        },
        "returns": {
          "_0": "- The deposit (for gas payment) of the account."
        }
      },
      "delegateAndRevert(address,bytes)": {
        "details": "calling this method, the EntryPoint will make a delegatecall to the given data, and report (via revert) the result.  The method always revert, so is only useful off-chain for dry run calls, in cases where state-override to replace  actual EntryPoint code is less convenient.",
        "params": {
          "data": "data to pass to target in a delegatecall",
          "target": "a target contract to make a delegatecall from entrypoint"
        }
      },
      "depositTo(address)": {
        "params": {
          "account": "- The account to add to."
        }
      },
      "getDepositInfo(address)": {
        "params": {
          "account": "- The account to query."
        },
        "returns": {
          "info": "  - Full deposit information of given account."
        }
      },
      "getNonce(address,uint192)": {
        "params": {
          "key": "the high 192 bit of the nonce",
          "sender": "the account address"
        },
        "returns": {
          "nonce": "a full nonce to pass for next UserOp with this sender."
        }
      },
      "getSenderAddress(bytes)": {
        "params": {
          "initCode": "- The constructor code to be passed into the UserOperation."
        }
      },
      "getUserOpHash((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes))": {
        "params": {
          "userOp": "- The user operation to generate the request ID for."
        },
        "returns": {
          "_0": "hash the hash of this UserOperation"
        }
      },
      "handleAggregatedOps(((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address,bytes)[],address)": {
        "params": {
          "beneficiary": "- The address to receive the fees.",
          "opsPerAggregator": "- The operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)."
        }
      },
      "handleOps((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address)": {
        "params": {
          "beneficiary": "- The address to receive the fees.",
          "ops": "- The operations to execute."
        }
      },
      "incrementNonce(uint192)": {
        "params": {
          "key": "- the \"nonce key\" to increment the \"nonce sequence\" for."
        }
      },
      "withdrawStake(address)": {
        "params": {
          "withdrawAddress": "- The address to send withdrawn value."
        }
      },
      "withdrawTo(address,uint256)": {
        "params": {
          "withdrawAddress": "- The address to send withdrawn value.",
          "withdrawAmount": "- The amount to withdraw."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "FailedOp(uint256,string)": [
        {
          "notice": "A custom revert error of handleOps andhandleAggregatedOps, to identify the offending op. Should be caught in off-chain handleOps/handleAggregatedOps simulation and not happen on-chain. Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts. NOTE: If simulateValidation passes successfully, there should be no reason for handleOps to fail on it."
        }
      ],
      "FailedOpWithRevert(uint256,string,bytes)": [
        {
          "notice": "A custom revert error of handleOps and handleAggregatedOps, to report a revert by account or paymaster."
        }
      ],
      "SignatureValidationFailed(address)": [
        {
          "notice": "Error case when a signature aggregator fails to verify the aggregated signature it had created."
        }
      ]
    },
    "events": {
      "AccountDeployed(bytes32,address,address,address)": {
        "notice": "Account \"sender\" was deployed."
      },
      "BeforeExecution()": {
        "notice": "An event emitted by handleOps() and handleAggregatedOps(), before starting the execution loop. Any event emitted before this event, is part of the validation."
      },
      "PostOpRevertReason(bytes32,address,uint256,bytes)": {
        "notice": "An event emitted if the UserOperation Paymaster's \"postOp\" call reverted with non-zero length."
      },
      "SignatureAggregatorChanged(address)": {
        "notice": "Signature aggregator used by the following UserOperationEvents within this bundle."
      },
      "UserOperationPrefundTooLow(bytes32,address,uint256)": {
        "notice": "UserOp consumed more than prefund. The UserOperation is reverted, and no refund is made."
      },
      "UserOperationRevertReason(bytes32,address,uint256,bytes)": {
        "notice": "An event emitted if the UserOperation \"callData\" reverted with non-zero length."
      }
    },
    "kind": "user",
    "methods": {
      "addStake(uint32)": {
        "notice": "Add to the account's stake - amount and delay any pending unstake is first cancelled."
      },
      "balanceOf(address)": {
        "notice": "Get account balance."
      },
      "delegateAndRevert(address,bytes)": {
        "notice": "Helper method for dry-run testing."
      },
      "depositTo(address)": {
        "notice": "Add to the deposit of the given account."
      },
      "getDepositInfo(address)": {
        "notice": "Get deposit info."
      },
      "getNonce(address,uint192)": {
        "notice": "Return the next nonce for this sender. Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop) But UserOp with different keys can come with arbitrary order."
      },
      "getSenderAddress(bytes)": {
        "notice": "Get counterfactual sender address. Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation. This method always revert, and returns the address in SenderAddressResult error.this method cannot be used for EIP-7702 derived contracts."
      },
      "getUserOpHash((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes))": {
        "notice": "Generate a request Id - unique identifier for this request. The request ID is a hash over the content of the userOp (except the signature), entrypoint address, chainId and (optionally) 7702 delegate address"
      },
      "handleAggregatedOps(((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address,bytes)[],address)": {
        "notice": "Execute a batch of UserOperation with Aggregators"
      },
      "handleOps((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address)": {
        "notice": "Execute a batch of UserOperations. No signature aggregator is used. If any account requires an aggregator (that is, it returned an aggregator when performing simulateValidation), then handleAggregatedOps() must be used instead."
      },
      "incrementNonce(uint192)": {
        "notice": "Manually increment the nonce of the sender. This method is exposed just for completeness.. Account does NOT need to call it, neither during validation, nor elsewhere, as the EntryPoint will update the nonce regardless. Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future UserOperations will not pay extra for the first transaction with a given key."
      },
      "senderCreator()": {
        "notice": "Retrieves the immutable SenderCreator contract which is responsible for deployment of sender contracts."
      },
      "unlockStake()": {
        "notice": "Attempt to unlock the stake. The value can be withdrawn (using withdrawStake) after the unstake delay."
      },
      "withdrawStake(address)": {
        "notice": "Withdraw from the (unlocked) stake. Must first call unlockStake and wait for the unstakeDelay to pass."
      },
      "withdrawTo(address,uint256)": {
        "notice": "Withdraw from the deposit."
      }
    },
    "version": 1
  }
}